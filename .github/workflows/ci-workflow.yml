name: CI Workflow

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config: [release]
        platform: [x64]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Build
      run: make -f Bootstrap.mak linux PLATFORM=${{ matrix.platform }} CONFIG=${{ matrix.config }}
    - name: Test
      run: bin/${{ matrix.config }}/premake5 test --test-all
    - name: Docs check
      run: bin/${{ matrix.config }}/premake5 docs-check
    - name: Upload Artifacts
      if: matrix.config == 'release'
      uses: actions/upload-artifact@v4
      with:
        name: premake-linux-${{ matrix.platform }}
        path: bin/${{ matrix.config }}/

  macosx:
    runs-on: macos-latest
    strategy:
      matrix:
        config: [release]
        platform: [x64, ARM64]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Build
      run: make -f Bootstrap.mak osx PLATFORM=${{ matrix.platform }} CONFIG=${{ matrix.config }}
    - name: Test
      run: bin/${{ matrix.config }}/premake5 test --test-all
    - name: Docs check
      run: bin/${{ matrix.config }}/premake5 docs-check
    - name: Upload Artifacts
      if: matrix.config == 'release'
      uses: actions/upload-artifact@v4
      with:
        name: premake-macosx-${{ matrix.platform }}
        path: bin/${{ matrix.config }}/

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        config: [release]
        platform: [Win32, x64]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Build
      run: |
        $vcvarsall_path = vswhere.exe -find VC\Auxiliary\Build\vcvarsall.bat
        cmd.exe /c "call ""$vcvarsall_path"" x86_amd64 && nmake -f Bootstrap.mak MSDEV=vs2019 windows-msbuild PLATFORM=${{ matrix.platform }} CONFIG=${{ matrix.config }}"
    - name: Test
      run: bin\${{ matrix.config }}\premake5 test --test-all
      shell: cmd
    - name: Docs check
      run: bin\${{ matrix.config }}\premake5 docs-check
      shell: cmd
    - name: Upload Artifacts
      if: matrix.config == 'release'
      uses: actions/upload-artifact@v4
      with:
        name: premake-windows-${{ matrix.platform }}
        path: bin\${{ matrix.config }}\

  mingw:
    runs-on: windows-latest
    strategy:
      matrix:
        config: [release]
        msystem: [mingw32, mingw64]
        include:
          - platform: x86
            msystem: mingw32
          - platform: x64
            msystem: mingw64
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.msystem }}
        update: true
        install: >-
          git
          make
        pacboy: >-
          toolchain:p
    - name: Build
      run: make -f Bootstrap.mak mingw PLATFORM=${{ matrix.platform }} CONFIG=${{ matrix.config }}
    - name: Test
      run: bin/${{ matrix.config }}/premake5.exe test --test-all
    - name: Docs check
      run: bin/${{ matrix.config }}/premake5.exe docs-check
    - name: Upload Artifacts
      if: matrix.config == 'release'
      uses: actions/upload-artifact@v4
      with:
        name: premake-${{ matrix.msystem }}-${{ matrix.platform }}
        path: bin\${{ matrix.config }}\

  release:	
    runs-on: ubuntu-latest	
    needs: [linux, macosx, windows, mingw]	
    steps:	
    - name: Checkout	
      uses: actions/checkout@v4	

    - name: Download Linux x64 Artifacts	
      uses: actions/download-artifact@v4	
      with:	
        name: premake-linux-x64	
        path: ./artifacts/linux-64/	

    - name: Download macOS x64 Artifacts	
      uses: actions/download-artifact@v4	
      with:	
        name: premake-macosx-x64	
        path: ./artifacts/macos-x64/	

    - name: Download macOS arm64 Artifacts	
      uses: actions/download-artifact@v4	
      with:	
        name: premake-macosx-ARM64
        path: ./artifacts/macos-arm64/	

    - name: Download Windows x86 Artifacts	
      uses: actions/download-artifact@v4	
      with:	
        name: premake-windows-Win32	
        path: ./artifacts/windows-x86/	

    - name: Download Windows x64 Artifacts	
      uses: actions/download-artifact@v4	
      with:	
        name: premake-windows-x64	
        path: ./artifacts/windows-x64/	

    - name: Download MinGW64 Artifacts	
      uses: actions/download-artifact@v4	
      with:	
        name: premake-mingw64-x64	
        path: ./artifacts/mingw64/	

    - name: Download MinGW32 Artifacts	
      uses: actions/download-artifact@v4	
      with:	
        name: premake-mingw32-x86
        path: ./artifacts/mingw32/	

    - name: Create ZIP Files	
      run: |	
        mkdir -p release
        cd artifacts/linux-x64 && zip -r -q ../../release/premake-linux-x64.zip . -x '*.DS_Store' && cd -
        cd artifacts/macos-x64 && zip -r -q ../../release/premake-macosx-x64.zip . -x '*.DS_Store' && cd -
        cd artifacts/macos-arm64 && zip -r -q ../../release/premake-macosx-arm64.zip . -x '*.DS_Store' && cd -
        cd artifacts/windows-x64 && zip -r -q ../../release/premake-windows-x64.zip . -x '*.DS_Store' && cd -
        cd artifacts/windows-x86 && zip -r -q ../../release/premake-windows-x86.zip . -x '*.DS_Store' && cd -
        cd artifacts/mingw64 && zip -r -q ../../release/premake-mingw64.zip . -x '*.DS_Store' && cd -
        cd artifacts/mingw32 && zip -r -q ../../release/premake-mingw32.zip . -x '*.DS_Store' && cd -
        
    - name: Create a Git Tag	
      id: tag	
      run: |	
        TAG_NAME=v${{ github.run_number }}	
        git tag $TAG_NAME	
        git push origin $TAG_NAME	
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV	
        
    - name: Create Release	
      uses: softprops/action-gh-release@v2	
      with:	
        tag_name: ${{ env.TAG_NAME }}	
        files: |	
          release/premake-linux-x64.zip	
          release/premake-macosx-x64.zip	
          release/premake-macosx-arm64.zip	
          release/premake-windows-x64.zip	
          release/premake-windows-x86.zip	
          release/premake-mingw64.zip	
          release/premake-mingw32.zip	
      env:	
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
